generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id])
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @unique @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?
  phoneVerified DateTime?
  password      String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  provider String?

  image    String?
  accounts Account[]
  sessions Session[]
  projects Project[]

  @@map(name: "users")
}

model Project {
  id           String        @id @unique @default(cuid())
  name         String        @unique
  isPublic     Boolean       @default(false)
  description  String?
  images       Image[]
  slug         String        @unique
  users        User[]
  appointments Appointment[]
}

model Image {
  url          String   @id @unique
  name         String?
  lastModified DateTime @default(now())
  size         Int?
  type         String?
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id                 Int             @id @unique @default(autoincrement())
  serviceName        String          @unique
  serviceDescription String          @default("Choice Wrap Service")
  timeRequired       Int             @default(1)
  category           ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId         Int
  appoinments        Appointment[]

  @@unique([id, serviceName])
}

model ServiceCategory {
  id                  Int       @id @default(autoincrement())
  categoryName        String    @unique
  categoryDescription String    @default("Service Category")
  services            Service[]
}

model Appointment {
  id                String    @id @default(cuid())
  preferredDate     DateTime
  actualDate        DateTime?
  estimatedDuration Int?
  actualDuration    Int?
  cancelled         Boolean?
  completed         Boolean?
  materialsCost     Int?
  laborCost         Int?
  services          Service[]
  project           Project   @relation(fields: [projectId], references: [id])
  projectId         String
}
